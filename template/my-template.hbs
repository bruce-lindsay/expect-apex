public {{#if subclass}}abstract {{/if}}class Expect{{datatype}}{{#if subclass}}Base{{/if}} extends Expect {
    protected final {{datatype}} expected;
    protected final Expect{{datatype}} parent;

{{#if subclass}}
    protected Expect{{datatype}}Base({{datatype}} expected) {
        this.parent = (Expect{{datatype}}) this;
{{else}}
    public Expect{{datatype}}({{datatype}} expected) {
        this.parent = this;
{{/if}}
        this.expected = expected;
    }
{{#if subclass}}
    protected Expect{{datatype}}Base({{datatype}} expected, Boolean negate, Expect{{datatype}} parent) {
{{else}}
    private Expect{{datatype}}({{datatype}} expected, Boolean negate, Expect{{datatype}} parent) {
{{/if}}
        super(negate);
        this.expected = expected;
        this.parent = parent;
    }
    public Expect{{datatype}} negated {
        get {
            return negate ? {{#if subclass}}(Expect{{datatype}}) {{/if}}this : new Expect{{datatype}}(this.expected, true, {{#if subclass}}(Expect{{datatype}}) {{/if}}this);
        }
    }
    protected override String getExpectedAsString() {
        return String.valueOf(expected);
    }
    {{#if subclass}}protected{{else}}private{{/if}} Expect{{datatype}} assertThis(Boolean test, String message) {
        assertNegatable(test, message);
        return {{#if subclass}}(Expect{{datatype}}) {{/if}}this.parent;
    }
    public Expect{{datatype}} shouldEqual({{datatype}} actual) {
        return shouldEqual(actual, formatMessage(SHOULD_BE_MESSAGE, String.valueOf(actual)));
    }
    public Expect{{datatype}} shouldEqual({{datatype}} actual, String message) {
{{#if equalityExpression}}
        return assertThis({{equalityExpression}}, message);
{{else}}
        return assertThis(expected == actual, message);
{{/if}}
    }
    public Expect{{datatype}} shouldBeLessThan({{datatype}} actual, string message) {
        return assertThis(expected < actual, message);
    }
    public Expect{{datatype}} shouldBeLessThan({{datatype}} actual) {
        return shouldBeLessThan(actual, expectedFormatMessage(SHOULD_BE_LESS_MESSAGE, String.valueOf(actual)));
    }
    public Expect{{datatype}} shouldBeLessThanOrEqualTo({{datatype}} actual, string message) {
        return assertThis(expected <= actual, message);
    }
    public Expect{{datatype}} shouldBeLessThanOrEqualTo({{datatype}} actual) {
        return shouldBeLessThanOrEqualTo(actual, expectedFormatMessage(SHOULD_BE_LESS_OR_EQUAL_MESSAGE, String.valueOf(actual)));
    }
    public Expect{{datatype}} shouldBeGreaterThan({{datatype}} actual, string message) {
        return assertThis(expected > actual, message);
    }
    public Expect{{datatype}} shouldBeGreaterThan({{datatype}} actual) {
        return shouldBeGreaterThan(actual, expectedFormatMessage(SHOULD_BE_GREATER_MESSAGE, String.valueOf(actual)));
    }
    public Expect{{datatype}} shouldBeGreaterThanOrEqualTo({{datatype}} actual, string message) {
        return assertThis(expected >= actual, message);
    }
    public Expect{{datatype}} shouldBeGreaterThanOrEqualTo({{datatype}} actual) {
        return shouldBeGreaterThanOrEqualTo(actual, expectedFormatMessage(SHOULD_BE_GREATER_OR_EQUAL_MESSAGE, String.valueOf(actual)));
    }
    public Expect{{datatype}} shouldBeBetween({{datatype}} rangeStart, {{datatype}} rangeEnd) {
        return shouldBeBetween(rangeStart, rangeEnd, expectedShouldBeBetweenMessage(String.valueOf(rangeStart), String.valueOf(rangeEnd)));
    }
    public Expect{{datatype}} shouldBeBetween({{datatype}} rangeStart, {{datatype}} rangeEnd, string message) {
        Boolean testedBetween = (rangeStart < rangeEnd) ?
            rangeStart <= this.expected && this.expected <= rangeEnd :
            rangeEnd <= this.expected && this.expected <= rangeStart;

        return assertThis(testedBetween, message);
    }
    public Expect{{datatype}} andIt { get { return{{#if subclass}} (Expect{{datatype}}){{/if}} this; } }
}